
@{
    ViewBag.Title = "display";
}
<div>
    <canvas id="displayCanvas"></canvas>
</div>

<script>

    var numOfSec = 0;
    var counter = 0;
    var timesPerSec;
    var interval;

    // Normalization function
    function convertCord(val, screenSize, cordRange)
    {
        return (val + cordRange) * (screenSize / (cordRange * 2))
    }

    // Initial x, y
    var prevX = 0;
    var prevY = 0;

    // Drawing circle
    drawCircle = (function () {
        $.post( "@Url.Action("GetLocation")").done(function (xml) {
                var xmlDoc = $.parseXML( xml ),
                $xml = $( xmlDoc ),
                lon = $xml.find( "lon" ).text();
                lat = $xml.find( "lat" ).text();
                // Draw Circle
                var dimension = [document.documentElement.clientWidth, document.documentElement.clientHeight];
                var canvas = document.getElementById('displayCanvas');
                canvas.width = dimension[0];
                canvas.height = dimension[1];
            

                var context = canvas.getContext('2d');
            

                var xCoord = parseFloat(lon);
                var yCoord = parseFloat(lat);

                //normalize the coordinates to the screen size
                xCoord = convertCord(xCoord, canvas.width, 180);
                yCoord = convertCord(yCoord, canvas.height, 90);
                prevX = xCoord;
                prevY = yCoord;

                //draw the outer circle
                var pointSize = 8;
                context.fillStyle = "000000"//black
                context.beginPath(); //Start path
                context.arc(xCoord, yCoord, pointSize, 0, Math.PI * 2, true); // Draw a point using the arc function of the canvas with a point structure.
                context.fill();

                //draw the inner circle
                context.fillStyle = "#ff2626"; //red
                pointSize = 7;
                context.beginPath(); //Start path
                context.arc(xCoord, yCoord, pointSize, 0, Math.PI * 2, true); // Draw a point using the arc function of the canvas with a point structure.
                context.fill();

        });
    });


    // Drawing line
    drawLine = (function () {

        if (numOfSec != 0) {

            if (counter < (timesPerSec * numOfSec)) {
                counter = counter + 1;
            }

            // Should stop show in the map
            else {
                $.post("@Url.Action("FinishTask")");
                clearInterval(interval);
                return;
            }
        }

        $.post( "@Url.Action("GetLocation")").done(function (xml) {
                if (xml == "-1") {
                    clearInterval(interval);
                    window.alert("Bye!");
                    return;
                }
                var xmlDoc = $.parseXML(xml),
                $xml = $( xmlDoc ),
                lon = $xml.find( "lon" ).text();
                lat = $xml.find( "lat" ).text();
                // Draw Line
                var canvas = document.getElementById('displayCanvas');
                var context = canvas.getContext('2d');
                context.lineWidth = 10;
                context.strokeStyle = "#ff2626";

                var xCoord = parseFloat(lon);
                var yCoord = parseFloat(lat);

                // normalize the coordinates to the screen size
                xCoord = convertCord(xCoord, canvas.width, 180);
                yCoord = convertCord(yCoord, canvas.height, 90);


                context.beginPath();
                context.moveTo(prevX, prevY);
                diffX = (xCoord - prevX) * 10;
                diffY = (yCoord - prevY) * 10;
            
                context.lineTo(xCoord , yCoord );
                prevX = xCoord;
                prevY = yCoord;

                context.stroke();

        });
    });


    drawCircle();
    timesPerSec = parseInt(@Session["times"]);
    var shouldSave = @Session["shouldSave"];

    // Display without saving to file
    if (shouldSave == 0) {
        if (timesPerSec != -1)
           interval = setInterval(drawLine, 1000 / timesPerSec);
    }

    // Display AND Save to file
    else
    {
        interval = setInterval(drawLine, 1000 / timesPerSec);
        numOfSec = parseInt(@Session["numOfSecs"]);
    }
</script>